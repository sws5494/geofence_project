<!DOCTYPE html>
<html>

<head>
    <!-- <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCsL3C53W0uF4LVWqfrJf5Kdv9KlcgGvME&callback=initMap" async defer></script> -->
    <!-- <script type="text/javascript" src="//apis.daum.net/maps/maps3.js?apikey=14ddcae6670e0995f030854bd3f806f1"></script> -->

    <title></title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        #map {
            float: left;
            height: 100%;
            width: 85%;
        }

        #my {
            float: left;
            width: 20%;
        }
        /* Optional: Makes the sample page fill the window. */

        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>

<body>
    <div id=map></div>
    <div id="pre_set" style="display:none">
        <input type="button" onclick="myMarker(this.value)" id="myId">
    </div>
    <br>
    <div id="field"></div>

    <script src="http://code.jquery.com/jquery-latest.min.js"></script>
    <script type="text/javascript" src="//apis.daum.net/maps/maps3.js?apikey=b71237800fad9424af97a5aeba4c0a38&libraries=services"></script>
    <script>
        var map;
        var marker;
        var iwContent; //텍스트 내용
        var infowindow; // 인포윈도우
        console.log(<%= lat %>);
        var mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: new daum.maps.LatLng(<%= lat %>, <%= lon %>), // 지도의 중심좌표
                level: 3 // 지도의 확대 레벨
            };

        var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

        // 마커를 표시할 위치입니다
        var position = new daum.maps.LatLng(<%= lat %>, <%= lon %>);
        myLocation(<%= lat %>, <%= lon %>);
        // 주소-좌표 변환 객체를 생성합니다
        var geocoder = new daum.maps.services.Geocoder();

        // 마커를 생성합니다
        marker = new daum.maps.Marker({
            position: position,
            clickable: true // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다
        });

        marker.setMap(map);
        var phonenum;

        function myMarker(value) {

            marker.setMap(null);
            console.log(value);
            phonenum = value.split('/');
            for (var i = 0; i < data_user.length; i++) {
                if (phonenum[1] == data_user[i].phonenum) {
                    console.log(phonenum[0]);
                    // 마커를 표시할 위치입니다
                    var position = new daum.maps.LatLng(data_user[i].lat, data_user[i].lon);
                    // myLocation(data_user[i].lat, data_user[i].lon);

                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', 'https://apis.daum.net/local/geo/coord2detailaddr?apikey=b71237800fad9424af97a5aeba4c0a38&x=' + data_user[i].lon + '&y=' + data_user[i].lat + '&inputCoordSystem=WGS84&output=json');
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === 4 && xhr.status === 200) {
                            var _tzs = xhr.responseText;
                            data_user2 = JSON.parse(_tzs);
                            console.log(data_user2.old.name);
                            infowindow.close();

                            iwContent = '<div style="padding:10px;font-weight:bold">' + phonenum[0] + " / " + data_user2.old.name + '</div>',
                                iwRemoveable = true;

                            // 인포윈도우를 생성합니다
                            infowindow = new daum.maps.InfoWindow({
                                content: iwContent,
                                removable: iwRemoveable
                            });
                            infowindow.open(map, marker);
                        }
                    }
                    xhr.send();

                    marker = new daum.maps.Marker({
                        position: position,
                        clickable: true // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다
                    });


                    var moveLatLon = new daum.maps.LatLng(data_user[i].lat, data_user[i].lon);
                    // 지도 중심을 부드럽게 이동시킵니다
                    // 만약 이동할 거리가 지도 화면보다 크면 부드러운 효과 없이 이동합니다
                    map.setCenter(moveLatLon);

                    marker.setMap(map);
                }
            }
        }

        function add_item(name, identifier) {
            console.log("ADD");
            var myId = document.getElementById('myId');
            document.getElementById('myId').value = name + "/" + identifier;
            var div = document.createElement('div');
            div.innerHTML = document.getElementById('pre_set').innerHTML;
            document.getElementById('field').appendChild(div);

        }

        function myLocation(lat, lon) {
            console.log(lat);
            console.log(lon);
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://apis.daum.net/local/geo/coord2detailaddr?apikey=b71237800fad9424af97a5aeba4c0a38&x=' + lon + '&y=' + lat + '&inputCoordSystem=WGS84&output=json');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    data_user2 = JSON.parse(_tzs);
                    console.log(data_user2.old.name);

                    iwContent = '<div style="padding:10px;font-weight:bold">' + data_user2.old.name + '</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
                        iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다

                    // 인포윈도우를 생성합니다
                    infowindow = new daum.maps.InfoWindow({
                        content: iwContent,
                        removable: iwRemoveable
                    });
                    infowindow.open(map, marker);

                    var moveLatLon = new daum.maps.LatLng(lat, lon);
                    // 지도 중심을 부드럽게 이동시킵니다
                    // 만약 이동할 거리가 지도 화면보다 크면 부드러운 효과 없이 이동합니다
                    map.panTo(moveLatLon);
                }
            }
            xhr.send();
        }

        (function() {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    data_user = JSON.parse(_tzs);
                    for (var i = 0; i < data_user.length; i++) {
                        add_item(data_user[i].name, data_user[i].phonenum);
                    }
                }
            }
            xhr.send();
        })();
    </script>

</body>

</html>
