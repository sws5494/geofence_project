<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title></title>
</head>


<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<script src="http://code.jquery.com/jquery-latest.min.js"></script>
<link rel="stylesheet" href="http://code.jquery.com/ui/1.8.18/themes/base/jquery-ui.css" type="text/css" />
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="http://code.jquery.com/ui/1.8.18/jquery-ui.min.js"></script>
<script type="text/javascript" src="//apis.daum.net/maps/maps3.js?apikey=b71237800fad9424af97a5aeba4c0a38&libraries=services"></script>

<!-- 날짜선택 -->
<link rel="stylesheet" href="./css/bootstrap.min.css" />
<!-- <link rel="stylesheet" href="./css/material.min.css" /> -->
<link rel="stylesheet" href="./css/bootstrap-material-datetimepicker.css" />
<link href='http://fonts.googleapis.com/css?family=Roboto:400,500' rel='stylesheet' type='text/css'>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript" src="./js/bootstrap.min.js"></script>
<script type="text/javascript" src="./js/material.min.js"></script>
<script type="text/javascript" src="./js/moment-with-locales.min.js"></script>
<script type="text/javascript" src="./js/bootstrap-material-datetimepicker.js"></script>

<script type="text/javascript">
    //날짜 선택
    $(document).ready(function() {
			$('#date').bootstrapMaterialDatePicker({
				time: false
			});

      $('#date2').bootstrapMaterialDatePicker({
        time: false
      });
			$.material.init()
		});


    /**
        var w; function startWorker() { if (window.Worker) { w = new Worker("myWorker.js"); w.onmessage = function(event) { alert(event.data); }; } else { alert('Web worker를 지원하지 않는 브라우저 입니다!'); } } startWorker();
    **/

    (function() {
        var xhr = new XMLHttpRequest();
        // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
        xhr.open('GET', 'http://192.168.64.166:3000/data_user');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var _tzs = xhr.responseText;
                data_user = JSON.parse(_tzs);
            }
        }
        xhr.send();
    })();

    (function() {
        var xhr = new XMLHttpRequest();
        // xhr.open('GET', 'http://192.168.64.166:3000/data');
        xhr.open('GET', 'http://192.168.64.166:3000/data');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var _tzs = xhr.responseText;
                request = JSON.parse(_tzs);
                console.log("request length=" + request.length);
                for (var i = 0; i < request.length; i++) {
                    if (request[i].allow == "대기") {
                        mytable = document.getElementById('mytable');
                        row = mytable.insertRow(mytable.rows.length);
                        cell1 = row.insertCell(0);
                        cell2 = row.insertCell(1);
                        cell3 = row.insertCell(2);
                        cell4 = row.insertCell(3);
                        cell5 = row.insertCell(4);
                        cell6 = row.insertCell(5);
                        for (var j = 0; j < data_user.length; j++) {
                            console.log(request[i].identifier + "=" + data_user[j].phonenum);
                            if (request[i].identifier == data_user[j].phonenum) {
                                cell1.innerHTML = data_user[j].name + "<br>(" + data_user[j].phonenum + ")";
                                cell2.innerHTML = request[i].startday + " " + request[i].starttime;
                                cell3.innerHTML = request[i].endday + " " + request[i].endtime;
                                cell4.innerHTML = request[i].reason;
                                cell5.innerHTML = request[i].time;
                                console.log(request[i].id);
                                console.log(request[i].allow);
                                cell6.innerHTML = '<select id=request_state onChange=allow_update(this.value)><option value=' + request[i].id + '-대기>' + "대기" + '</option><option value=' + request[i].id + '-승인>' + "승인" +
                                    '</option><option value=' + request[i].id + '-거절>' +
                                    "거절" +
                                    '</option></select>';
                            }
                        }

                    }
                }
            }
        }
        xhr.send();
    })();

    function allow_update(_value) {
        console.log("click");
        var value = _value.split('-');
        // var identifier = $("#request_state option:selected").val();
        // var allow = $("#request_state option:selected").text();
        // console.log(identifier);
        console.log(value[0]);
        console.log(value[1]);
        var xhr = new XMLHttpRequest();
        // xhr.open('POST', 'http://192.168.64.166:3000/request_allow?allow=' + value[1] + '&identifier=' + value[0] + '&notify='+ 'update');
        xhr.open('POST', 'http://192.168.64.166:3000/request_allow?allow=' + value[1] + '&identifier=' + value[0] + '&notify=' + 'update');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log("OK");
            }
        }
        xhr.send();
        window.location.reload();
    }

    function request_all() {
        var identifier = $("#request_idAll option:selected").val();
        console.log(identifier);
        if (identifier == "all") {
            request_func_all();
        } else if (identifier == "ago") {
            request_func_ago();
        }
    }

    function request_func_all() {
        console.log("request_func_all");
        delete_row();
        (function() {
            var xhr = new XMLHttpRequest();
            // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    data_user = JSON.parse(_tzs);
                }
            }
            xhr.send();
        })();

        (function() {
            var xhr = new XMLHttpRequest();
            // xhr.open('GET', 'http://192.168.64.166:3000/data');
            xhr.open('GET', 'http://192.168.64.166:3000/data');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    request = JSON.parse(_tzs);
                    console.log("request length=" + request.length);
                    for (var i = 0; i < request.length; i++) {
                        if (request[i].allow == "대기") {
                            mytable = document.getElementById('mytable');
                            row = mytable.insertRow(mytable.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            cell5 = row.insertCell(4);
                            cell6 = row.insertCell(5);
                            for (var j = 0; j < data_user.length; j++) {
                                console.log(request[i].identifier + "=" + data_user[j].phonenum);
                                if (request[i].identifier == data_user[j].phonenum) {
                                    cell1.innerHTML = data_user[j].name + "<br>(" + data_user[j].phonenum + ")";
                                    cell2.innerHTML = request[i].startday + " " + request[i].starttime;
                                    cell3.innerHTML = request[i].endday + " " + request[i].endtime;
                                    cell4.innerHTML = request[i].reason;
                                    cell5.innerHTML = request[i].time;
                                    console.log(request[i].id);
                                    console.log(request[i].allow);
                                    cell6.innerHTML = '<select id=request_state onChange=allow_update(this.value)><option value=' + request[i].id + '-대기>' + "대기" + '</option><option value=' + request[i].id + '-승인>' + "승인" +
                                        '</option><option value=' + request[i].id + '-거절>' +
                                        "거절" +
                                        '</option></select>';
                                }
                            }

                        }
                    }
                }
            }
            xhr.send();
        })();
    }

    function tab3_select_name() {
        var identifier = $("#tab3_select option:selected").val();
        console.log(identifier);
        delete_row3();
        (function() {
            var xhr = new XMLHttpRequest();
            // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    data_user = JSON.parse(_tzs);
                }
            }
            xhr.send();
        })();

        (function() {
            var xhr = new XMLHttpRequest();
            // xhr.open('GET', 'http://192.168.64.166:3000/data_geofence');
            xhr.open('GET', 'http://192.168.64.166:3000/data_geofence');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    geofence = JSON.parse(_tzs);
                    console.log(geofence.length);
                    for (var i = 0; i < geofence.length; i++) {
                        if (identifier == geofence[i].identifier) {
                            mytable3 = document.getElementById('mytable3');
                            row = mytable3.insertRow(mytable3.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            for (var j = 0; j < data_user.length; j++) {
                                if (geofence[i].identifier == data_user[j].phonenum) {
                                    cell1.innerHTML = data_user[j].name + "<br>(" + data_user[j].phonenum + ")";
                                }
                            }
                            cell2.innerHTML = geofence[i].onoff;
                            cell3.innerHTML = geofence[i].time;
                        }
                    }
                }
            }
            xhr.send();
        })();
    }

    function request_func_ago() {
        console.log("request_func_all");
        delete_row();
        (function() {
            var xhr = new XMLHttpRequest();
            // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    data_user = JSON.parse(_tzs);
                }
            }
            xhr.send();
        })();

        (function() {
            var xhr = new XMLHttpRequest();
            // xhr.open('GET', 'http://192.168.64.166:3000/data');
            xhr.open('GET', 'http://192.168.64.166:3000/data');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    request = JSON.parse(_tzs);
                    console.log("request length=" + request.length);
                    for (var i = 0; i < request.length; i++) {
                        mytable = document.getElementById('mytable');
                        row = mytable.insertRow(mytable.rows.length);
                        cell1 = row.insertCell(0);
                        cell2 = row.insertCell(1);
                        cell3 = row.insertCell(2);
                        cell4 = row.insertCell(3);
                        cell5 = row.insertCell(4);
                        cell6 = row.insertCell(5);
                        if (request[i].allow == "승인" || request[i].allow == "거절") {
                            // cell1.innerHTML = request[i].identifier;
                            for (var j = 0; j < data_user.length; j++) {
                                console.log(request[i].identifier + "=" + data_user[j].phonenum);
                                if (request[i].identifier == data_user[j].phonenum) {
                                    console.log("==");
                                    cell1.innerHTML = data_user[j].name + "<br>(" + data_user[j].phonenum + ")";
                                    cell2.innerHTML = request[i].startday + " " + request[i].starttime;
                                    cell3.innerHTML = request[i].endday + " " + request[i].endtime;
                                    cell4.innerHTML = request[i].reason;
                                    cell5.innerHTML = request[i].time;
                                    if (request[i].allow == "승인") {
                                        cell6.innerHTML = '<select id=request_state onChange=allow_update(this.value)><option value=' + request[i].id + '-승인>' + "승인" + '</option><option value=' + request[i].id + '-거절>' + "거절" +
                                            '</option><option value=' + request[i].id + '-대기>' +
                                            "대기" +
                                            '</option></select>';
                                    } else if (request[i].allow == "거절") {
                                        cell6.innerHTML = '<select id=request_state onChange=allow_update(this.value)><option value=' + request[i].id + '-거절>' + "거절" + '</option><option value=' + request[i].id + '-대기>' + "대기" +
                                            '</option><option value=' + request[i].id + '-승인>' +
                                            "승인" +
                                            '</option></select>';
                                    }
                                }
                            }
                        }
                    }
                }
            }
            xhr.send();
        })();
    }

    function delete_row() {
        mytable = document.getElementById('mytable');
        var temp = mytable.rows.length;
        console.log("length" + mytable.rows.length);
        for (var i = 0; i < temp - 1; i++) {
            mytable.deleteRow(mytable.rows.length - 1);
            console.log("삭제");
        }
    }
</script>

<body id="myBody" style="background:#F7F7F7">
    <div id="container">
        <div id="header">
            <div id="myDiv" width="100%" align="center">
                <ul class="tabs" align="center" width="100%">
                    <li class="active" rel="tab1" id="request_list">
                        신청목록
                    </li>
                    <li rel="tab2" id="out_admin">
                        외출관리
                    </li>
                    <li rel="tab3" id="inout_list">
                        출입목록
                    </li>
                    <li rel="tab4" id="user_admin">
                        사용자관리
                    </li>
                    <li rel="tab5" id="set_geo">
                        지오펜스설정
                    </li>
                </ul>
                <div class="tab_container">
                    <div id="tab1" class="tab_content">
                        <br>
                        <div class="search" width="70%" align="center">
                            <select id="identi_select">
                              <option>이름(전화번호)</option>
                            </select>
                            <select id="request_idAll" onChange=request_all()>
                              <option value="all">신청목록</option>
                              <option value="ago">지난신청목록</option>
                            </select>
                        </div>
                        <br>
                        <table width="95%" height="80%" align="center" id="mytable">
                            <tr id="myTr" align="center" style="background:#3B5998;color:#FFFFFF;font-size:14px;font-weight:bold">
                                <td width="8%">이름(전화번호)</td>
                                <td width="10%">시작시간</td>
                                <td width="10%">종료시간</td>
                                <td width="5%">사유</td>
                                <td width="12%">신청시간</td>
                                <td width="5%">상태</td>
                            </tr>
                        </table>
                    </div>

                    <div id="tab2" class="tab_content">
                        <br>
                        <div class="search" width="100%" align="center">
                            <select id="name2">
                              <option>이름(전화번호)</option>
                            </select>
                            <select id="state">
                              <option>전체</option>
                              <option>승인</option>
                              <option>미승인</option>
                            </select>
                        </div>
                        <br>
                        <table width="95%" height="80%" align="center" id="mytable2">
                            <tr align="center" style="background:#3B5998;color:#FFFFFF;font-size:14px;font-weight:bold">
                                <td width="5%">이름(전화번호)</td>
                                <td width="5%">귀원예정시간</td>
                                <td width="10%">현재위치</td>
                                <td width="5%">상태</td>
                            </tr>
                        </table>
                    </div>

                    <div id="tab3" class="tab_content">
                        <br>
                        <div class="search" width="100%" align="center">
                            <div class="form-group">
                                <input type="text" id="date" placeholder="시작">
                                <input type="text" id="date2" placeholder="종료">

                                <select id="tab3_select" onchange="tab3_select_name()">
                                  <option>전체</option>
                                </select>
                            </div>
                        </div>
                        <br>
                        <table width="95%" height="80%" align="center" id="mytable3">
                            <tr align="center" style="background:#3B5998;color:#FFFFFF;font-size:14px;font-weight:bold">
                                <td width="30%">이름(전화번호)</td>
                                <td width="30%">출입여부</td>
                                <td width="40%">출입시간</td>
                            </tr>
                        </table>
                    </div>

                    <div id="tab4" class="tab_content">
                        <br>
                        <div class="search3" width="100%" align="center">
                            <input type="text" name="" placeholder="이름" id="user_name"></input>
                            <input type="text" name="" placeholder="전화번호" id="user_phonenum"></input>
                            <input type="button" class="btn btn-default" name="" value="추가" id="user_add"></input>
                        </div>
                        <br>
                        <table width="95%" height="80%" align="center" id="mytable4">
                            <tr align="center" style="background:#3B5998;color:#FFFFFF;font-size:14px;font-weight:bold">
                                <td width="5%">이름</td>
                                <td width="5%">전화번호</td>
                                <td width="5%">GPS ON/OFF</td>
                                <td width="5%">App설치</td>
                                <td width="5%">삭제</td>
                            </tr>
                        </table>
                    </div>

                    <div id="tab5" class="tab_content">
                        <br>
                        <div class="search5" width="100%" align="center">
                            <div id="map" style="width:95%;height:400px;"></div>
                            <br>
                            <input type="button" id="btn_geoAdd" class="btn btn-default" name="" value="추가" id="" onclick="geoMap()"></input>
                            <input type="button" id="btn_geoReset" class="btn btn-default" name="" value="지도초기화" id="" onclick="removeCircles()"></input>
                        </div>
                        <br>
                        <table width="95%" height="80%" align="center" id="mytable5">
                            <tr align="center" style="background:#3B5998;color:#FFFFFF;font-size:14px;font-weight:bold">
                                <td width="20%">보기</td>
                                <td width="20%">위도</td>
                                <td width="20%">경도</td>
                                <td width="20%">범위</td>
                                <td width="20%">삭제</td>
                            </tr>
                        </table>
                    </div>
                </div>
                <!-- .tab_container -->
            </div>
        </div>
    </div>
    <!-- #container -->
    <script>
        var mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: new daum.maps.LatLng(35.145338, 129.007827), // 지도의 중심좌표
                level: 3 // 지도의 확대 레벨
            };

        var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

        var locFlag = false;
        var lat = 0;
        var lon = 0;
        var lastlat = 0;
        var lastlon = 0;
        var range = 0;
        var drawingFlag = false; // 원이 그려지고 있는 상태를 가지고 있을 변수입니다
        var centerPosition; // 원의 중심좌표 입니다
        var drawingCircle; // 그려지고 있는 원을 표시할 원 객체입니다
        var drawingLine; // 그려지고 있는 원의 반지름을 표시할 선 객체입니다
        var drawingOverlay; // 그려지고 있는 원의 반경을 표시할 커스텀오버레이 입니다
        var drawingDot; // 그려지고 있는 원의 중심점을 표시할 커스텀오버레이 입니다

        var circles = []; // 클릭으로 그려진 원과 반경 정보를 표시하는 선과 커스텀오버레이를 가지고 있을 배열입니다

        // 지도에 클릭 이벤트를 등록합니다
        daum.maps.event.addListener(map, 'click', function(mouseEvent) {
            // 클릭 이벤트가 발생했을 때 원을 그리고 있는 상태가 아니면 중심좌표를 클릭한 지점으로 설정합니다
            // if (!drawingFlag) {

            // 상태를 그리고있는 상태로 변경합니다
            drawingFlag = true;

            // 원이 그려질 중심좌표를 클릭한 위치로 설정합니다
            centerPosition = mouseEvent.latLng;
            // centerPosition = new daum.maps.LatLng(33.450701, 126.570667);
            console.log(centerPosition);
            // 그려지고 있는 원의 반경을 표시할 선 객체를 생성합니다
            if (!drawingLine) {
                drawingLine = new daum.maps.Polyline({
                    strokeWeight: 3, // 선의 두께입니다
                    strokeColor: '#00a0e9', // 선의 색깔입니다
                    strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                    strokeStyle: 'solid' // 선의 스타일입니다
                });
            }

            // 그려지고 있는 원을 표시할 원 객체를 생성합니다
            if (!drawingCircle) {
                drawingCircle = new daum.maps.Circle({
                    strokeWeight: 1, // 선의 두께입니다
                    strokeColor: '#00a0e9', // 선의 색깔입니다
                    strokeOpacity: 0.1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                    strokeStyle: 'solid', // 선의 스타일입니다
                    fillColor: '#00a0e9', // 채우기 색깔입니다
                    fillOpacity: 0.2 // 채우기 불투명도입니다
                });
            }

            // 그려지고 있는 원의 반경 정보를 표시할 커스텀오버레이를 생성합니다
            if (!drawingOverlay) {
                drawingOverlay = new daum.maps.CustomOverlay({
                    xAnchor: 0,
                    yAnchor: 0,
                    zIndex: 1
                });
            }
            // }
        });

        // 지도에 마우스무브 이벤트를 등록합니다
        // 원을 그리고있는 상태에서 마우스무브 이벤트가 발생하면 그려질 원의 위치와 반경정보를 동적으로 보여주도록 합니다
        daum.maps.event.addListener(map, 'mousemove', function(mouseEvent) {

            // 마우스무브 이벤트가 발생했을 때 원을 그리고있는 상태이면
            if (drawingFlag) {

                // 마우스 커서의 현재 위치를 얻어옵니다
                var mousePosition = mouseEvent.latLng;
                console.log(mousePosition);
                console.log(mousePosition.gb);
                console.log(mousePosition.hb);
                if (!locFlag) {
                    removeCircles();
                    lat = mousePosition.hb;
                    lon = mousePosition.gb;
                    locFlag = true;
                }

                // 그려지고 있는 선을 표시할 좌표 배열입니다. 클릭한 중심좌표와 마우스커서의 위치로 설정합니다
                var linePath = [centerPosition, mousePosition];

                // 그려지고 있는 선을 표시할 선 객체에 좌표 배열을 설정합니다
                drawingLine.setPath(linePath);

                // 원의 반지름을 선 객체를 이용해서 얻어옵니다
                var length = drawingLine.getLength();

                if (length > 0) {

                    // 그려지고 있는 원의 중심좌표와 반지름입니다
                    var circleOptions = {
                        center: centerPosition,
                        radius: length,
                    };

                    // 그려지고 있는 원의 옵션을 설정합니다
                    drawingCircle.setOptions(circleOptions);

                    // 반경 정보를 표시할 커스텀오버레이의 내용입니다
                    var radius = Math.round(drawingCircle.getRadius()),
                        content = '<div class="info">반경 <span class="number">' + radius + '</span>m</div>';

                    // 반경 정보를 표시할 커스텀 오버레이의 좌표를 마우스커서 위치로 설정합니다
                    drawingOverlay.setPosition(mousePosition);

                    // 반경 정보를 표시할 커스텀 오버레이의 표시할 내용을 설정합니다
                    drawingOverlay.setContent(content);

                    // 그려지고 있는 원을 지도에 표시합니다
                    drawingCircle.setMap(map);

                    // 그려지고 있는 선을 지도에 표시합니다
                    drawingLine.setMap(map);

                    // 그려지고 있는 원의 반경정보 커스텀 오버레이를 지도에 표시합니다
                    drawingOverlay.setMap(map);

                } else {

                    drawingCircle.setMap(null);
                    drawingLine.setMap(null);
                    drawingOverlay.setMap(null);

                }
            }
        });

        // 지도에 마우스 오른쪽 클릭이벤트를 등록합니다
        // 원을 그리고있는 상태에서 마우스 오른쪽 클릭 이벤트가 발생하면
        // 마우스 오른쪽 클릭한 위치를 기준으로 원과 원의 반경정보를 표시하는 선과 커스텀 오버레이를 표시하고 그리기를 종료합니다
        daum.maps.event.addListener(map, 'rightclick', function(mouseEvent) {

            if (drawingFlag) {
                locFlag = false;
                // 마우스로 오른쪽 클릭한 위치입니다
                var rClickPosition = mouseEvent.latLng;
                console.log(rClickPosition);
                lastlat = rClickPosition.hb;
                lastlon = rClickPosition.gb;
                // 원의 반경을 표시할 선 객체를 생성합니다
                var polyline = new daum.maps.Polyline({
                    path: [centerPosition, rClickPosition], // 선을 구성하는 좌표 배열입니다. 원의 중심좌표와 클릭한 위치로 설정합니다
                    strokeWeight: 3, // 선의 두께 입니다
                    strokeColor: '#00a0e9', // 선의 색깔입니다
                    strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                    strokeStyle: 'solid' // 선의 스타일입니다
                });

                // 원 객체를 생성합니다
                var circle = new daum.maps.Circle({
                    center: centerPosition, // 원의 중심좌표입니다
                    radius: polyline.getLength(), // 원의 반지름입니다 m 단위 이며 선 객체를 이용해서 얻어옵니다
                    strokeWeight: 1, // 선의 두께입니다
                    strokeColor: '#00a0e9', // 선의 색깔입니다
                    strokeOpacity: 0.1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                    strokeStyle: 'solid', // 선의 스타일입니다
                    fillColor: '#00a0e9', // 채우기 색깔입니다
                    fillOpacity: 0.2 // 채우기 불투명도입니다
                });

                var radius = Math.round(circle.getRadius()), // 원의 반경 정보를 얻어옵니다
                    content = getTimeHTML(radius); // 커스텀 오버레이에 표시할 반경 정보입니다

                range = radius;

                // 반경정보를 표시할 커스텀 오버레이를 생성합니다
                var radiusOverlay = new daum.maps.CustomOverlay({
                    content: content, // 표시할 내용입니다
                    position: rClickPosition, // 표시할 위치입니다. 클릭한 위치로 설정합니다
                    xAnchor: 0,
                    yAnchor: 0,
                    zIndex: 1
                });

                // 원을 지도에 표시합니다
                circle.setMap(map);

                // 선을 지도에 표시합니다
                polyline.setMap(map);

                // 반경 정보 커스텀 오버레이를 지도에 표시합니다
                radiusOverlay.setMap(map);

                // 배열에 담을 객체입니다. 원, 선, 커스텀오버레이 객체를 가지고 있습니다
                var radiusObj = {
                    'polyline': polyline,
                    'circle': circle,
                    'overlay': radiusOverlay
                };

                // 배열에 추가합니다
                // 이 배열을 이용해서 "모두 지우기" 버튼을 클릭했을 때 지도에 그려진 원, 선, 커스텀오버레이들을 지웁니다
                circles.push(radiusObj);

                // 그리기 상태를 그리고 있지 않는 상태로 바꿉니다
                drawingFlag = false;

                // 중심 좌표를 초기화 합니다
                centerPosition = null;

                // 그려지고 있는 원, 선, 커스텀오버레이를 지도에서 제거합니다
                drawingCircle.setMap(null);
                drawingLine.setMap(null);
                drawingOverlay.setMap(null);
            }
        });

        // 지도에 표시되어 있는 모든 원과 반경정보를 표시하는 선, 커스텀 오버레이를 지도에서 제거합니다
        function removeCircles() {
            lat = 0;
            lon = 0;
            lastlat = 0;
            lastlon = 0;
            range = 0;

            for (var i = 0; i < circles.length; i++) {
                circles[i].circle.setMap(null);
                circles[i].polyline.setMap(null);
                circles[i].overlay.setMap(null);
            }
            circles = [];
        }

        // 마우스 우클릭 하여 원 그리기가 종료됐을 때 호출하여
        // 그려진 원의 반경 정보와 반경에 대한 도보, 자전거 시간을 계산하여
        // HTML Content를 만들어 리턴하는 함수입니다
        function getTimeHTML(distance) {

            // 도보의 시속은 평균 4km/h 이고 도보의 분속은 67m/min입니다
            var walkkTime = distance / 67 | 0;
            var walkHour = '',
                walkMin = '';

            // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다
            if (walkkTime > 60) {
                walkHour = '<span class="number">' + Math.floor(walkkTime / 60) + '</span>시간 '
            }
            walkMin = '<span class="number">' + walkkTime % 60 + '</span>분'

            // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다
            var bycicleTime = distance / 227 | 0;
            var bycicleHour = '',
                bycicleMin = '';

            // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다
            if (bycicleTime > 60) {
                bycicleHour = '<span class="number">' + Math.floor(bycicleTime / 60) + '</span>시간 '
            }
            bycicleMin = '<span class="number">' + bycicleTime % 60 + '</span>분'

            // 거리와 도보 시간, 자전거 시간을 가지고 HTML Content를 만들어 리턴합니다
            var content = '<ul class="info">';
            content += '    <li>';
            content += '        <span class="info2">총거리</span><span class="number">' + distance + '</span>m';
            content += '    </li>';
            /*content += '    <li>';
            content += '        <span class="label">도보</span>' + walkHour + walkMin;
            content += '    </li>';
            content += '    <li>';
            content += '        <span class="label">자전거</span>' + bycicleHour + bycicleMin;
            content += '    </li>';*/
            content += '</ul>'

            return content;
        }
    </script>
</body>

</html>

<script type="text/javascript">
    window.onload = function() {

        var set_geo = document.getElementById('set_geo');
        var request_list = document.getElementById('request_list');
        var out_admin = document.getElementById('out_admin');
        var inout_list = document.getElementById('inout_list');
        var user_admin = document.getElementById('user_admin');
        var user_add = document.getElementById('user_add');
        var request_state = document.getElementById('request_state');
        var mymap = document.getElementById('mymap');
        var tab3_select = document.getElementById('tab3_select');

        request_list.onclick = function() {
            window.location.reload();

            // request_func_all();

            /*delete_row();
            (function() {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                // xhr.open('GET', 'http://125.134.138.166:3000/data_user');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        data_user = JSON.parse(_tzs);
                    }
                }
                xhr.send();
            })();

            (function() {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'http://192.168.64.166:3000/data');
                // xhr.open('GET', 'http://125.134.138.166:3000/data');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        request = JSON.parse(_tzs);
                        console.log("request length=" + request.length);
                        for (var i = 0; i < request.length; i++) {
                            mytable = document.getElementById('mytable');
                            row = mytable.insertRow(mytable.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            cell5 = row.insertCell(4);
                            cell6 = row.insertCell(5);
                            cell1.innerHTML = request[i].identifier;
                            cell2.innerHTML = request[i].startday + " " + request[i].starttime;
                            cell3.innerHTML = request[i].endday + " " + request[i].endtime;
                            cell4.innerHTML = request[i].reason;
                            cell5.innerHTML = request[i].time;
                            cell6.innerHTML = '<select id=request_state><option value=null>' + "대기" + '</option><option value=null>' + "승인" + '</option><option value=null>' + "거절" + '</option></select>';
                            for (var j = 0; j < data_user.length; j++) {
                                console.log(request[i].identifier + "=" + data_user[j].phonenum);
                                if (request[i].identifier == data_user[j].phonenum) {
                                    console.log("==");
                                    cell1.innerHTML = data_user[j].name + "<br>(" + data_user[j].phonenum + ")";
                                }
                            }
                        }
                    }
                }
                xhr.send();
            })();*/
        }

        out_admin.onclick = function() {
            delete_row2();
            (function() {
                var xhr = new XMLHttpRequest();
                // xhr.open('GET', 'http://192.168.64.166:3000/data');
                xhr.open('GET', 'http://192.168.64.166:3000/data');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        data_request = JSON.parse(_tzs);
                        console.log("request length=" + data_request.length);
                    }
                }
                xhr.send();
            })();

            (function() {
                var xhr = new XMLHttpRequest();
                // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        data_user = JSON.parse(_tzs);
                        console.log(data_user.length);
                        /*for (var i = 0; i < data_request.length; i++) {
                            mytable2 = document.getElementById('mytable2');
                            row = mytable2.insertRow(mytable2.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            for (var j = 0; j < data_user.length; j++) {
                                if (data_user[j].phonenum == data_request[i].identifier) {
                                    cell1.innerHTML = data_user[j].name + "<br>(" + data_user[i].phonenum + ")";
                                }
                            }
                            cell1.innerHTML = data_user[i].name + "<br>(" + data_user[i].phonenum + ")";
                            cell2.innerHTML = data_request[i].endday + " " + data_request[i].endtime;
                            cell3.innerHTML = "<input type=button value=부산광역시&nbsp사상구&nbsp주례1동 onclick=mymap(" + data_request[i].identifier + "," + data_user[i].lat + "," + data_user[i].lon + ")>";
                            cell4.innerHTML = "<span style='font-weight:bold; font-size:14px'>" + data_request[i].allow + "</span>";
*/
                        for (var i = 0; i < data_user.length; i++) {
                            mytable2 = document.getElementById('mytable2');
                            row = mytable2.insertRow(mytable2.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            for (var j = 0; j < data_request.length; j++) {
                                if (data_user[i].phonenum == data_request[j].identifier) {
                                    cell1.innerHTML = data_user[i].name + "<br>(" + data_user[i].phonenum + ")";
                                    cell2.innerHTML = data_request[j].endday + " " + data_request[j].endtime;
                                    // myLocation(data_user[i].lat, data_user[i].lon);
                                    cell3.innerHTML = "<input type=button id=btn_now_loc class='btn btn-default' value=현재위치... onclick=mymap(" + data_request[j].identifier + "," + data_user[i].lat + "," + data_user[i].lon + ")>";
                                    if (data_request[j].allow == "대기") {
                                        cell4.innerHTML = "<span style='font-weight:bold; font-size:14px'>" + data_request[j].allow + "</span>";
                                    } else if (data_request[j].allow == "승인") {
                                        cell4.innerHTML = "<span style='color:green; font-weight:bold; font-size:14px'>" + data_request[j].allow + "</span>";
                                    } else if (data_request[j].allow == "거절") {
                                        cell4.innerHTML = "<span style='color:red; font-weight:bold; font-size:14px'>" + data_request[j].allow + "</span>";
                                    }
                                } else {

                                }
                            }
                            // cell3.innerHTML = "("+data_user[i].lat + ", " + data_user[i].lon+")";
                            // addAddress();

                        }
                    }
                }
                xhr.send();
            })();
        }

        inout_list.onclick = function() {
            removeOption();
            addOption();
            delete_row3();
            // tab3_select_name();

            (function() {
                var xhr = new XMLHttpRequest();
                // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        data_user = JSON.parse(_tzs);
                    }
                }
                xhr.send();
            })();

            (function() {
                var xhr = new XMLHttpRequest();
                // xhr.open('GET', 'http://192.168.64.166:3000/data_geofence');
                xhr.open('GET', 'http://192.168.64.166:3000/data_geofence');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        geofence = JSON.parse(_tzs);
                        console.log(geofence.length);
                        for (var i = 0; i < geofence.length; i++) {
                            console.log(geofence[i].identifier);
                            if (geofence[i].identifier != 'null') {
                                mytable3 = document.getElementById('mytable3');
                                row = mytable3.insertRow(mytable3.rows.length);
                                cell1 = row.insertCell(0);
                                cell2 = row.insertCell(1);
                                cell3 = row.insertCell(2);
                                for (var j = 0; j < data_user.length; j++) {
                                    if (geofence[i].identifier == data_user[j].phonenum) {
                                        cell1.innerHTML = data_user[j].name + "<br>(" + data_user[j].phonenum + ")";
                                        cell2.innerHTML = geofence[i].onoff;
                                        cell3.innerHTML = geofence[i].time;
                                    }
                                }

                            }
                        }
                    }
                }
                xhr.send();
            })();
        }

        user_admin.onclick = function() {
            delete_row4();
            var splitTime;
            var installTime;
            var d = new Date();
            var nowTime = d.getDate() * 86400 + d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds();
            console.log("now=" + nowTime);
            (function() {
                var xhr = new XMLHttpRequest();
                // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        user = JSON.parse(_tzs);
                        console.log(user.length);
                        for (var i = 0; i < user.length; i++) {
                            mytable4 = document.getElementById('mytable4');
                            row = mytable4.insertRow(mytable4.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            cell5 = row.insertCell(4);
                            cell1.innerHTML = user[i].name;
                            cell2.innerHTML = user[i].phonenum;
                            if (user[i].gps == null) {
                                cell3.innerHTML = '알수없음';
                            } else {
                                cell3.innerHTML = user[i].gps;
                            }
                            user[i].installYN = "" + user[i].installYN; //문자열로 변환
                            splitTime = (user[i].installYN).split('-');
                            installTime = Number(splitTime[0] * 86400) + Number(splitTime[1] * 3600) + Number(splitTime[2] * 60) + Number(splitTime[3]);
                            console.log("ins=" + installTime);
                            if (nowTime > installTime + 6) {
                                cell4.innerHTML = '미설치';
                            } else if (nowTime < installTime + 6) {
                                cell4.innerHTML = '설치';
                            } else {
                                cell4.innerHTML = '알수없음';
                            }
                            cell5.innerHTML = '<input type=button id=user_delete class="btn btn-default" value=삭제 onclick=delete_user(' + user[i].phonenum + ')"></input>';
                        }
                    }
                }
                xhr.send();
            })();
        }

        user_add.onclick = function() {
            delete_row4();
            var user_name = document.getElementById('user_name').value;
            var user_phonenum = document.getElementById('user_phonenum').value;
            console.log(user_name);
            console.log(user_phonenum);
            (function() {
                var xhr = new XMLHttpRequest();
                // var url = encodeURI('http://192.168.64.166:3000/user?name='+user_name+'&phonenum='+user_phonenum);
                // xhr.open('POST', 'http://192.168.64.166:3000/user?name=' + user_name + '&phonenum=' + user_phonenum);
                xhr.open('POST', 'http://192.168.64.166:3000/user?name=' + user_name + '&phonenum=' + user_phonenum);
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        console.log("OOKK");
                    }
                }
                xhr.send();
            })();
            if (user_name == '손원석') {
                console.log("원석");
                (function() {
                    var xhr = new XMLHttpRequest();
                    // var url = encodeURI('http://192.168.64.166:3000/user?name='+user_name+'&phonenum='+user_phonenum);
                    // xhr.open('POST', 'http://192.168.64.166:3000/user?name=' + user_name + '&phonenum=' + user_phonenum);
                    xhr.open('POST', 'http://192.168.64.166:3000/user_loc2?phonenum=' + user_phonenum + "&lat=35.145697&lon=129.007312");
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === 4 && xhr.status === 200) {
                            console.log("OOKK");
                        }
                    }
                    xhr.send();
                })();
            }

            (function() {
                var xhr = new XMLHttpRequest();
                // xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.open('GET', 'http://192.168.64.166:3000/data_user');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        user = JSON.parse(_tzs);
                        console.log(user.length);
                        for (var i = 0; i < user.length; i++) {
                            mytable4 = document.getElementById('mytable4');
                            row = mytable4.insertRow(mytable4.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            cell5 = row.insertCell(4);
                            cell1.innerHTML = user[i].name;
                            cell2.innerHTML = user[i].phonenum;
                            if (user[i].gps == null) {
                                cell3.innerHTML = '알수없음';
                            } else {
                                cell3.innerHTML = user[i].gps;
                            }
                            user[i].installYN = "" + user[i].installYN; //문자열로 변환
                            splitTime = (user[i].installYN).split('-');
                            installTime = Number(splitTime[0] * 86400) + Number(splitTime[1] * 3600) + Number(splitTime[2] * 60) + Number(splitTime[3]);
                            console.log("ins=" + installTime);
                            if (nowTime > installTime + 6) {
                                cell4.innerHTML = '미설치';
                            } else if (nowTime < installTime + 6) {
                                cell4.innerHTML = '설치';
                            } else {
                                cell4.innerHTML = '알수없음';
                            }
                            cell5.innerHTML = '<input type=button value=삭제 onclick=delete_user(' + user[i].phonenum + ')></input>';
                        }
                    }
                }
                xhr.send();
            })();
            window.location.reload();
        }

        set_geo.onclick = function() {
            delete_row5();
            removeCircles();
            (function() {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'http://192.168.64.166:3000/setGeoData');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var _tzs = xhr.responseText;
                        geoData = JSON.parse(_tzs);

                        for (var i = 0; i < geoData.length; i++) {
                            var temp = {
                                lat: geoData[i].lat,
                                lon: geoData[i].lon,
                                lastlat: geoData[i].lastlat,
                                lastlon: geoData[i].lastlon,
                                radius: geoData[i].radius
                            };
                            mytable5 = document.getElementById('mytable5');
                            row = mytable5.insertRow(mytable5.rows.length);
                            cell1 = row.insertCell(0);
                            cell2 = row.insertCell(1);
                            cell3 = row.insertCell(2);
                            cell4 = row.insertCell(3);
                            cell5 = row.insertCell(4);
                            cell1.innerHTML = '<input type=button id=btn_geoview class="btn btn-default" value=보기 onclick=myGeoTest(' + temp.lat + ',' + temp.lon + ',' + temp.lastlat + ',' + temp.lastlon + ',' + temp.radius + ')>';
                            cell2.innerHTML = geoData[i].lat;
                            cell3.innerHTML = geoData[i].lon;
                            cell4.innerHTML = geoData[i].radius + 'M';
                            cell5.innerHTML = '<input type=button id=btn_geodelete class="btn btn-default" value=삭제 onclick=deleteGeo(' + geoData[i].id + ')>';
                        }
                    }
                }
                xhr.send();
            })();
        }

        /*request_state.onclick = function() {
            console.log("click");
            var identifier = request_state.options[request_state.selectedIndex].value;
            var allow = request_state.options[request_state.selectedIndex].text;
            console.log(identifier);
            console.log(allow);
            (function() {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', 'http://192.168.64.166:3000/request_allow?allow=' + allow + '&identifier=' + identifier);
                // xhr.open('POST', 'http://125.134.138.166:3000/request_allow?allow='+allow+'&id='+id);
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        console.log("OK");
                    }
                }
                xhr.send();
            })();
        }*/

    }; //// window onload End

    function myLocation(lat, lon) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', 'https://apis.daum.net/local/geo/coord2addr?apikey=14ddcae6670e0995f030854bd3f806f1&longitude=' + lon + '&latitude=' + lat + '&inputCoordSystem=WGS84&output=json');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var _tzs = xhr.responseText;
                // console.log(_tzs.name);
                // location = JSON.parse(_tzs);
                // console.log(location);

            }
        }
        xhr.send();
    }

    function addOption() {
        /*(function() {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'http://192.168.64.166:3000/data_user');
            // xhr.open('GET', 'http://125.134.138.166:3000/data_user');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var _tzs = xhr.responseText;
                    user = JSON.parse(_tzs);

                }
            }
            xhr.send();
        })();*/

        var valArr = new Array();
        var valArr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        var objSel = document.getElementById("tab3_select");
        for (i = 0; i < data_user.length; i++) {
            var objOption = document.createElement("option");
            objOption.text = data_user[i].name + "(" + data_user[i].phonenum + ")";
            objOption.value = data_user[i].phonenum;
            objSel.options.add(objOption);
        }
    }

    function removeOption() {
        var objSel = document.getElementById("tab3_select");
        //alert(objSel.options[i].text +"//"+ objSel.options[i].value +"//"+ i);
        for (i = objSel.length; i > 0; i--) {
            objSel.options[i] = null;
        }
    }

    function delete_user(phonenum) {
        console.log(phonenum);
        var xhr = new XMLHttpRequest();
        // xhr.open('POST', 'http://192.168.64.166:3000/user_delete?phonenum=' + phonenum);
        xhr.open('POST', 'http://192.168.64.166:3000/user_delete?phonenum=' + "0" + phonenum);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log("OK");
            }
        }
        xhr.send();

        var xhr2 = new XMLHttpRequest();
        xhr2.open('POST', 'http://192.168.64.166:3000/user_delete2?phonenum=' + "0" + phonenum);
        xhr2.onreadystatechange = function() {
            if (xhr2.readyState === 4 && xhr2.status === 200) {
                console.log("OK");
            }
        }
        xhr2.send();

        var xhr3 = new XMLHttpRequest();
        xhr3.open('POST', 'http://192.168.64.166:3000/user_delete3?phonenum=' + "0" + phonenum);
        xhr3.onreadystatechange = function() {
            if (xhr3.readyState === 4 && xhr3.status === 200) {
                console.log("OK");
            }
        }
        xhr3.send();
        window.location.reload();
    }

    function mymap(identifier, lat, lon) {
        console.log("0" + identifier);
        console.log(lat);
        console.log(lon);
        // var popUrl = "http://192.168.64.166:3000/map?identifier=" + identifier + "&lat=" + lat + "&lon=" + lon; //팝업창에 출력될 페이지 URL
        var popUrl = "http://192.168.64.166:3000/map?identifier=" + identifier + "&lat=" + lat + "&lon=" + lon; //팝업창에 출력될 페이지 URL
        var popOption = "width=950, height=700, resizable=no, scrollbars=no, status=no;"; //팝업창 옵션(optoin)
        window.open(popUrl, "", popOption);
    }

    function geoMap() {
        if (lat != 0 && lon != 0 && range != 0 && lastlat != 0 && lastlon != 0) {
            console.log("lat=" + lat);
            console.log("lon=" + lon);
            console.log("lat=" + lastlat);
            console.log("lon=" + lastlon);
            console.log("range=" + range);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'http://192.168.64.166:3000/setGeo?lat=' + lat + '&lon=' + lon + '&range=' + range + '&lastlat=' + lastlat + '&lastlon=' + lastlon);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    console.log("OK");
                    removeCircles();
                }
            }
            xhr.send();
        } else {
            console.log("geoMap() error");
        }
    }

    function delete_row() {
        mytable = document.getElementById('mytable');
        var temp = mytable.rows.length;
        console.log("length" + mytable.rows.length);
        for (var i = 0; i < temp - 1; i++) {
            mytable.deleteRow(mytable.rows.length - 1);
            console.log("삭제");
        }
    }

    function delete_row2() {
        mytable2 = document.getElementById('mytable2');
        var temp = mytable2.rows.length;
        console.log("length" + mytable2.rows.length);
        for (var i = 0; i < temp - 1; i++) {
            mytable2.deleteRow(mytable2.rows.length - 1);
            console.log("삭제");
        }
    }

    function delete_row3() {
        mytable3 = document.getElementById('mytable3');
        var temp = mytable3.rows.length;
        console.log("length" + mytable3.rows.length);
        for (var i = 0; i < temp - 1; i++) {
            mytable3.deleteRow(mytable3.rows.length - 1);
            console.log("삭제");
        }
    }

    function delete_row4() {
        mytable4 = document.getElementById('mytable4');
        var temp = mytable4.rows.length;
        console.log("length" + mytable4.rows.length);
        for (var i = 0; i < temp - 1; i++) {
            mytable4.deleteRow(mytable4.rows.length - 1);
            console.log("삭제");
        }
    }

    function delete_row5() {
        mytable5 = document.getElementById('mytable5');
        var temp = mytable5.rows.length;
        console.log("length" + mytable5.rows.length);
        for (var i = 0; i < temp - 1; i++) {
            mytable5.deleteRow(mytable5.rows.length - 1);
            console.log("삭제");
        }
    }
</script>

<script>
    function deleteGeo(id) {
        console.log(id);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'http://192.168.64.166:3000/geo_delete?id=' + id);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {

            }
        }
        xhr.send();
    }

    function myGeoTest(_lat, _lon, lastlat, lastlon, radius) {
        removeCircles();
        console.log(_lat);
        console.log(_lon);
        console.log(lastlat);
        console.log(lastlon);
        console.log(radius);
        var myZoom = 0;
        if (radius < 50) {
            myZoom = 2;
        } else if (radius < 100) {
            myZoom = 3;
        } else if (radius < 200) {
            myZoom = 4;
        } else if (radius < 400) {
            myZoom = 5;
        } else if (radius < 900) {
            myZoom = 6;
        } else if (radius < 2100) {
            myZoom = 7;
        } else if (radius < 4500) {
            myZoom = 8;
        } else {
            myZoom = 10;
        }


        /*mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: new daum.maps.LatLng(_lat, _lon), // 지도의 중심좌표
                level: myZoom // 지도의 확대 레벨
            };*/
        // var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

        var moveLatLon = new daum.maps.LatLng(_lat, _lon);
        console.log(moveLatLon);
        map.setLevel(myZoom);
        map.panTo(moveLatLon);

        var locFlag = false;
        var lat = 0;
        var lon = 0;
        var range = 0;
        var drawingFlag = false; // 원이 그려지고 있는 상태를 가지고 있을 변수입니다
        var centerPosition; // 원의 중심좌표 입니다
        var drawingCircle; // 그려지고 있는 원을 표시할 원 객체입니다
        var drawingLine; // 그려지고 있는 원의 반지름을 표시할 선 객체입니다
        var drawingOverlay; // 그려지고 있는 원의 반경을 표시할 커스텀오버레이 입니다
        var drawingDot; // 그려지고 있는 원의 중심점을 표시할 커스텀오버레이 입니다

        circles = []; // 클릭으로 그려진 원과 반경 정보를 표시하는 선과 커스텀오버레이를 가지고 있을 배열입니다

        // 지도에 클릭 이벤트를 등록합니다
        // daum.maps.event.addListener(map, 'click', function(mouseEvent) {

        // 클릭 이벤트가 발생했을 때 원을 그리고 있는 상태가 아니면 중심좌표를 클릭한 지점으로 설정합니다
        // if (!drawingFlag) {

        // 상태를 그리고있는 상태로 변경합니다
        drawingFlag = true;

        // 원이 그려질 중심좌표를 클릭한 위치로 설정합니다
        // centerPosition = mouseEvent.latLng;
        centerPosition = new daum.maps.LatLng(_lat, _lon);

        // 그려지고 있는 원의 반경을 표시할 선 객체를 생성합니다
        if (!drawingLine) {
            drawingLine = new daum.maps.Polyline({
                strokeWeight: 3, // 선의 두께입니다
                strokeColor: '#00a0e9', // 선의 색깔입니다
                strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                strokeStyle: 'solid' // 선의 스타일입니다
            });
        }

        // 그려지고 있는 원을 표시할 원 객체를 생성합니다
        if (!drawingCircle) {
            drawingCircle = new daum.maps.Circle({
                strokeWeight: 1, // 선의 두께입니다
                strokeColor: '#00a0e9', // 선의 색깔입니다
                strokeOpacity: 0.1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                strokeStyle: 'solid', // 선의 스타일입니다
                fillColor: '#00a0e9', // 채우기 색깔입니다
                fillOpacity: 0.2 // 채우기 불투명도입니다
            });
        }

        // 그려지고 있는 원의 반경 정보를 표시할 커스텀오버레이를 생성합니다
        if (!drawingOverlay) {
            drawingOverlay = new daum.maps.CustomOverlay({
                xAnchor: 0,
                yAnchor: 0,
                zIndex: 1
            });
        }
        // }
        // });

        // 지도에 마우스무브 이벤트를 등록합니다
        // 원을 그리고있는 상태에서 마우스무브 이벤트가 발생하면 그려질 원의 위치와 반경정보를 동적으로 보여주도록 합니다
        // daum.maps.event.addListener(map, 'mousemove', function(mouseEvent) {

        // 마우스무브 이벤트가 발생했을 때 원을 그리고있는 상태이면
        if (drawingFlag) {

            // 마우스 커서의 현재 위치를 얻어옵니다
            var mousePosition = new daum.maps.LatLng(lat, lon);
            // var mousePosition = mouseEvent.latLng;
            /*console.log(mousePosition.ib);
            console.log(mousePosition.hb);
            if (!locFlag) {
                removeCircles();
                lat = mousePosition.ib;
                lon = mousePosition.hb;
                locFlag = true;
            }*/

            // 그려지고 있는 선을 표시할 좌표 배열입니다. 클릭한 중심좌표와 마우스커서의 위치로 설정합니다
            var linePath = [centerPosition, mousePosition];

            // 그려지고 있는 선을 표시할 선 객체에 좌표 배열을 설정합니다
            drawingLine.setPath(linePath);

            // 원의 반지름을 선 객체를 이용해서 얻어옵니다
            var length = drawingLine.getLength();

            if (length > 0) {

                // 그려지고 있는 원의 중심좌표와 반지름입니다
                var circleOptions = {
                    center: centerPosition,
                    radius: length,
                };

                // 그려지고 있는 원의 옵션을 설정합니다
                drawingCircle.setOptions(circleOptions);

                // 반경 정보를 표시할 커스텀오버레이의 내용입니다
                var radius = Math.round(drawingCircle.getRadius()),
                    content = '<div class="info">반경 <span class="number">' + radius + '</span>m</div>';

                // 반경 정보를 표시할 커스텀 오버레이의 좌표를 마우스커서 위치로 설정합니다
                drawingOverlay.setPosition(mousePosition);

                // 반경 정보를 표시할 커스텀 오버레이의 표시할 내용을 설정합니다
                drawingOverlay.setContent(content);

                // 그려지고 있는 원을 지도에 표시합니다
                drawingCircle.setMap(map);

                // 그려지고 있는 선을 지도에 표시합니다
                drawingLine.setMap(map);

                // 그려지고 있는 원의 반경정보 커스텀 오버레이를 지도에 표시합니다
                drawingOverlay.setMap(map);

            } else {

                drawingCircle.setMap(null);
                drawingLine.setMap(null);
                drawingOverlay.setMap(null);

            }
        }
        // });

        // 지도에 마우스 오른쪽 클릭이벤트를 등록합니다
        // 원을 그리고있는 상태에서 마우스 오른쪽 클릭 이벤트가 발생하면
        // 마우스 오른쪽 클릭한 위치를 기준으로 원과 원의 반경정보를 표시하는 선과 커스텀 오버레이를 표시하고 그리기를 종료합니다
        // daum.maps.event.addListener(map, 'rightclick', function(mouseEvent) {

        if (drawingFlag) {
            locFlag = false;
            // 마우스로 오른쪽 클릭한 위치입니다
            var rClickPosition = new daum.maps.LatLng(lastlat, lastlon);

            // 원의 반경을 표시할 선 객체를 생성합니다
            var polyline = new daum.maps.Polyline({

                path: [centerPosition, rClickPosition], // 선을 구성하는 좌표 배열입니다. 원의 중심좌표와 클릭한 위치로 설정합니다
                strokeWeight: 3, // 선의 두께 입니다
                strokeColor: '#00a0e9', // 선의 색깔입니다
                strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                strokeStyle: 'solid' // 선의 스타일입니다
            });

            console.log(centerPosition);
            console.log(rClickPosition);

            // 원 객체를 생성합니다
            var circle = new daum.maps.Circle({
                center: centerPosition, // 원의 중심좌표입니다
                radius: polyline.getLength(), // 원의 반지름입니다 m 단위 이며 선 객체를 이용해서 얻어옵니다
                strokeWeight: 1, // 선의 두께입니다
                strokeColor: '#00a0e9', // 선의 색깔입니다
                strokeOpacity: 0.1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
                strokeStyle: 'solid', // 선의 스타일입니다
                fillColor: '#00a0e9', // 채우기 색깔입니다
                fillOpacity: 0.2 // 채우기 불투명도입니다
            });

            var radius = Math.round(circle.getRadius()), // 원의 반경 정보를 얻어옵니다
                content = getTimeHTML(radius); // 커스텀 오버레이에 표시할 반경 정보입니다

            range = radius;

            // 반경정보를 표시할 커스텀 오버레이를 생성합니다
            var radiusOverlay = new daum.maps.CustomOverlay({
                content: content, // 표시할 내용입니다
                position: rClickPosition, // 표시할 위치입니다. 클릭한 위치로 설정합니다
                xAnchor: 0,
                yAnchor: 0,
                zIndex: 1
            });

            // 원을 지도에 표시합니다
            circle.setMap(map);

            // 선을 지도에 표시합니다
            polyline.setMap(map);

            // 반경 정보 커스텀 오버레이를 지도에 표시합니다
            radiusOverlay.setMap(map);

            // 배열에 담을 객체입니다. 원, 선, 커스텀오버레이 객체를 가지고 있습니다
            var radiusObj = {
                'polyline': polyline,
                'circle': circle,
                'overlay': radiusOverlay
            };

            // 배열에 추가합니다
            // 이 배열을 이용해서 "모두 지우기" 버튼을 클릭했을 때 지도에 그려진 원, 선, 커스텀오버레이들을 지웁니다
            circles.push(radiusObj);

            // 그리기 상태를 그리고 있지 않는 상태로 바꿉니다
            drawingFlag = false;

            // 중심 좌표를 초기화 합니다
            centerPosition = null;

            // 그려지고 있는 원, 선, 커스텀오버레이를 지도에서 제거합니다
            drawingCircle.setMap(null);
            drawingLine.setMap(null);
            drawingOverlay.setMap(null);

            drawingFlag = false;
        }
        // });


    }

    // 지도에 표시되어 있는 모든 원과 반경정보를 표시하는 선, 커스텀 오버레이를 지도에서 제거합니다
    /*function removeCircles2() {
        for (var i = 0; i < circles.length; i++) {
            circles[i].circle.setMap(null);
            circles[i].polyline.setMap(null);
            circles[i].overlay.setMap(null);
        }
        circles = [];
    }*/

    // 마우스 우클릭 하여 원 그리기가 종료됐을 때 호출하여
    // 그려진 원의 반경 정보와 반경에 대한 도보, 자전거 시간을 계산하여
    // HTML Content를 만들어 리턴하는 함수입니다
    function getTimeHTML(distance) {

        // 도보의 시속은 평균 4km/h 이고 도보의 분속은 67m/min입니다
        var walkkTime = distance / 67 | 0;
        var walkHour = '',
            walkMin = '';

        // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다
        if (walkkTime > 60) {
            walkHour = '<span class="number">' + Math.floor(walkkTime / 60) + '</span>시간 '
        }
        walkMin = '<span class="number">' + walkkTime % 60 + '</span>분'

        // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다
        var bycicleTime = distance / 227 | 0;
        var bycicleHour = '',
            bycicleMin = '';

        // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다
        if (bycicleTime > 60) {
            bycicleHour = '<span class="number">' + Math.floor(bycicleTime / 60) + '</span>시간 '
        }
        bycicleMin = '<span class="number">' + bycicleTime % 60 + '</span>분'

        // 거리와 도보 시간, 자전거 시간을 가지고 HTML Content를 만들어 리턴합니다
        var content = '<ul class="info">';
        content += '    <li>';
        content += '        <span class="info2">총거리</span><span class="number">' + distance + '</span>m';
        content += '    </li>';
        /*content += '    <li>';
        content += '        <span class="label">도보</span>' + walkHour + walkMin;
        content += '    </li>';
        content += '    <li>';
        content += '        <span class="label">자전거</span>' + bycicleHour + bycicleMin;
        content += '    </li>';*/
        content += '</ul>'

        return content;
    }
</script>

<script type="text/javascript">
    function addAddress() {
        var oScript = document.createElement('script');
        oScript.type = 'text/javascript';
        oScript.charset = 'utf-8';
        oScript.src = 'https://apis.daum.net/local/geo/coord2addr?apikey=' + '14ddcae6670e0995f030854bd3f806f1' +
            '&latitude=' + 35.15336496 + '&longitude=' + 128.99937361 +
            '&output=json&callback=addrSearch';
        document.getElementsByTagName('head')[0].appendChild(oScript);
    }

    function addrSearch(data) {
        console.log(data.fullName);
        cell3.innerHTML = data.fullName + "(35.15336496, 128.99937361)";
    }
</script>

<script type="text/javascript">
    $(function() {

        $(".tab_content").hide();
        $(".tab_content:first").show();

        $("ul.tabs li").click(function() {
            $("ul.tabs li").removeClass("active").css("color", "#333");
            //$(this).addClass("active").css({"color": "darkred","font-weight": "bolder"});
            $(this).addClass("active").css("color", "darkred");
            $(".tab_content").hide()
            var activeTab = $(this).attr("rel");
            $("#" + activeTab).fadeIn()
        });
    });
</script>

<style media="screen">
    #date {
        width: 200px;
    }

    .form-control-wrapper {
        margin: 10px 20px;
    }

    #user_add,
    #user_delete,
    #btn_geoview,
    #btn_geodelete,
    #btn_geoAdd {
        text-align: center;
        font-weight: bold;
        font-size: 13px;
        width: 55px;
        height: 30px;
    }

    #btn_now_loc,
    #btn_geoReset {
        text-align: center;
        font-weight: bold;
        font-size: 13px;
        width: 90px;
        height: 30px;
    }

    #mytable,
    #mytable2,
    #mytable3,
    #mytable4,
    #mytable5 {
        text-align: center;
    }

    #table_column {
        border-bottom: 10px;
    }

    #myBody {
        width: 100%;
        text-align: center;
    }

    #myTr {
        font-size: 13px;
    }

    ul.tabs {
        text-align: center;
        margin: 0;
        padding: 0;
        float: center;
        list-style: none;
        height: 32px;
        border-bottom: 1px solid #eee;
        border-left: 1px solid #eee;
        width: 70%;
        font-family: "dotum";
        font-size: 12px;
    }

    ul.tabs li {
        float: left;
        text-align: center;
        cursor: pointer;
        width: 82px;
        height: 31px;
        line-height: 31px;
        border: 1px solid #eee;
        border-left: none;
        font-weight: bold;
        background: #f0f0f0;
        overflow: hidden;
        position: relative;
    }

    ul.tabs li.active {
        background: #FFFFFF;
        border-bottom: 1px solid #FFFFFF;
    }

    .tab_container {
        border: 1px solid #eee;
        border-top: none;
        clear: both;
        float: center;
        width: 70%;
        background: #FFFFFF;
    }

    .tab_content {
        padding: 5px;
        font-size: 12px;
        display: none;
    }

    .tab_container .tab_content ul {
        width: 100%;
        margin: 0px;
        padding: 0px;
    }

    .tab_container .tab_content ul li {
        padding: 5px;
        list-style: none
    }

    ;

    #container {
        width: 100%;
        margin: 0 auto;
        text-align: center;
    }



    .info {
        position: relative;
        top: 5px;
        left: 5px;
        border-radius: 6px;
        border: 1px solid #ccc;
        border-bottom: 2px solid #ddd;
        font-size: 12px;
        padding: 5px;
        background: #fff;
        list-style: none;
        margin: 0;
    }

    .info:nth-of-type(n) {
        border: 0;
        box-shadow: 0px 1px 2px #888;
    }

    .info .info2 {
        display: inline-block;
        width: 50px;
    }

    .number {
        font-weight: bold;
        color: #00a0e9;
    }
</style>
